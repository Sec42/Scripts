#!/usr/bin/env perl

# Simple commandline script to query dict.leo.org
# (c) by Stefan `Sec` Zehl - (first version from < 2001 )

use Encode qw(decode);
use utf8;
use open ':locale';
use warnings;
use strict;
use FindBin;
use lib "$FindBin::Bin/../GET/";
use lib "/home/sec/Project/Scripts/GET/";
use GET;

my %uml= (
	A => "Ä",
	O => "Ö",
	U => "Ü",
	a => "ä",
	o => "ö",
	u => "ü",
);

$|=1;

use Getopt::Long;
my $counter = 0;
my $utfe = 0;
my $verbose = 0;
my $fr=0;
my $maxline= 24;
GetOptions ("fr"      => \$fr,
		    "counter" => \$counter,
		    "utfe"    => \$utfe,
		    "lines=n" => \$maxline,
		    "verbose" => \$verbose);

GET::config (
	min_cache => 3000,
	disable_cachedb => 1,
	verbose => $verbose,
);

my $lang='ende';
$lang='frde' if ($fr);

$maxline=10 if $counter;
$maxline=10 if $utfe;

my $src="@ARGV";
$src =~ y/a-zA-Z_-//cd;

my $body=GET::get_url("http://dict.leo.org/dictQuery/m-vocab/${lang}/de.html?searchLoc=0&lp=${lang}&lang=de&search=${src}&resultOrder=basic");

$_=$body;
$_="" if !defined $_; # quick hack if no hits.

# Cut out relevant part
s/.*<div itemprop="breadcrumb"//s; # 2014-04 - 2014-12
s/.*<header itemprop="breadcrumb"//s; # starting at 2014-12
s/Weitere Aktionen.*//s;

s/\n/ /g;
s/^.*?(<tr>)/$1/i;
s{</t[dhr]>}{}gi;

s{<t(head|body)(?: [^>]*)?>}{}gi;
s{</t(head|body)>}{}gi;
s{<colgroup>.*?</colgroup>}{}gi;
s{<header(?: [^>]*)?>.*?</header>}{}gi;
s{<footer(?: [^>]*)?>.*?</footer>}{}gi;
s{</table>\s*(<[^>]+>\s*)+?<table(?: [^>]*)?>}{}gi;
s{(<[^>]+>\s*)+$}{};

s{<(/?)strong>}{<${1}b>}gi;
s{<h1 class=[^>]+>(.*?)</h1>}{<b>$1</b>}gi; # Section headers (2014-04)
s{<h2 class=[^>]+>(.*?)</h2>}{<b>$1</b>}gi; # Section headers (2014-12)
s{</?b>}{\002}gi if($counter);
s{</?b>}{}gi;

s{</?[mt]>}{}gi;
s{</?sr>}{}gi;
s{</?mark>}{}gi; # 2017-03
s{</?samp>}{}gi; # 2017-03
s{</?small>}{}gi; # 2017-03

s!&(.)uml;!$uml{$1}!g;

s{<h2>(.*?)</h2>}{$1}gi;
s{<span(?: title="[^"]+")?>(.*?)</span>}{$1}gi; # 2017-03
s{<a href="[#&;\w/-]+">(.*?)</a>}{$1}gi; # 2017-03
s{<a href="[^"]+"(?:\s+[\w-]+="[^"]+")*>(.*?)</a>}{$1}gi; # 2017-05

s{&nbsp;}{ }g;
s{(?:&#160;)+}{ }g;


s{<span title="\w+">\s*([^<]+)</span>}{$1}gi;
s{<i( [^>]*)?>\s*</i>}{ }gi; #2017-05
s{<sup>\s*([^<]+)</sup>}{[$1]}gi;
s{\s*<small(?: class="\w+")?>\s*([^<]+)</small>}{ $1}gi;
s{<span class="[\w-]+">\s*([^<]+)</span>}{$1}gi;
s{<span class="sp [^"]*"[^>]*>\s*</span>}{ }gi;
s{<span style="[^"]+">\s*</span>}{ }gi;
s{<i(?: class="\w+")?>\s*([^<]+)</i>}{/$1/}gi;
s{<i(?: class=[^>]+)?>\s*([^<]+)</i>}{/$1/}gi;

### Parse the table...
my ($l,$cnt)=(0,0);
my @ar; # Result table

while ($_){
	if (s/^<tr(?:\s[^>]*)?>\s*//i){
		$cnt=0;$l++;
	}elsif (s/<\/table>.*?<table>//si){
		#
	} elsif(s/^<t[dh](?:\s[^>]*)?>\s*(.*?)\s*(<t[hdr][ >]|$)/$2/i){
		my $q=$1;
#		$q =~ s/<[^>]+>//g if ($tag);
		$q =~ s/\|.*//; # 2014-14: remove additional info in "Verben"
		$ar[$l][$cnt++]=$q;
	}else{
		print "End: $_";
		last;
	};
};

if($l<2){
	print "0 Hits, sorry\n";
	exit;
};

#use Data::Dumper; print Dumper \@ar;

sub mystrprint;
my $line=0;
for $a (1..$l){
	next if($ar[$a][0] eq ""  && $#{$ar[$a]} < 7 );

	if(!$verbose){
		if(($counter) && $line>$maxline){
			print "- trunctated\n";
			exit;
		};
		if($line>2*$maxline){
			print "- trunctated\n";
			exit;
		};
	};
	if ($#{$ar[$a]} == 0){ # Header
		if(!$counter){
			print "\n" unless $line==0;
			$line++;
		};
		print mystrprint (33,$ar[$a][0]),"\n";
	}else{
		print 
			mystrprint (33,$ar[$a][4]), # 2017-03 (before: 0/1)
			mystrprint (33,$ar[$a][7]),
			"\n";
	};
	$line++;
	if($counter){
		sleep (1) if(($line>4) && ($line%2));
		sleep (1) if(($line>8) && !($line%2));
	};
};

sub mystrprint {
	my $len=shift;
	my $str=shift;
	my $out;

	for (map {substr($str,$_,1) } (0..length($str))){
		$out.=$_;
		next if($_ eq "\x2");
		$len--;
#		last if $len==0;
	};
	$len=1 if($len<0);
	if($len>0){
		$out.=" "x$len;
	};
	return $out;
};

